const request = require("supertest");
const express = require("express");
const router = require("../routes/account_creation.js");
const User = require("../models/user.js");
const { generateTokenAndSetCookie } = require("../utils/generateToken.js");

jest.mock("../models/user.js");
jest.mock("../utils/generateToken.js");

const app = express();
app.use(express.json());
app.use(router);

describe("POST /signup", () => {
    beforeEach(() => {
        jest.clearAllMocks(); // Clear mocks between tests to prevent shared state issues
    });

    it("should return 400 if email is missing", async () => {
        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", password: "password123" }); // Missing email

        expect(response.status).toBe(400);
        expect(response.body).toEqual({ error: "Missing required parameters" });
    });

    it("should return 400 if password is missing", async () => {
        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", email: "test@example.com" }); // Missing password

        expect(response.status).toBe(400);
        expect(response.body).toEqual({ error: "Missing required parameters" });
    });

    it("should return 400 if username is missing", async () => {
        const response = await request(app)
            .post("/signup")
            .send({ email: "test@example.com", password: "password123" }); // Missing username

        expect(response.status).toBe(400);
        expect(response.body).toEqual({ error: "Missing required parameters" });
    });

    it("should return 400 if all required parameters are missing", async () => {
        const response = await request(app)
            .post("/signup")
            .send({}); // All parameters missing

        expect(response.status).toBe(400);
        expect(response.body).toEqual({ error: "Missing required parameters" });
    });

    it("should return 400 if password is less than 6 characters", async () => {
        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", email: "test@example.com", password: "123" }); // Password too short

        expect(response.status).toBe(400);
        expect(response.body).toEqual({ error: "Password must be at least 6 characters long" });
    });

    it("should return 409 if the username already exists", async () => {
        User.findOne.mockResolvedValueOnce({ username: "existinguser" }); // Mock existing username

        const response = await request(app)
            .post("/signup")
            .send({ username: "existinguser", email: "test@example.com", password: "password123" });

        expect(response.status).toBe(409);
        expect(response.body).toEqual({
            success: false,
            message: "This username is already taken by another account. Please use another one."
        });
    });

    it("should return 409 if the email already exists", async () => {
        User.findOne.mockResolvedValueOnce(null); // Username does not exist
        User.findOne.mockResolvedValueOnce({ email: "existing@example.com" }); // Email exists

        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", email: "existing@example.com", password: "password123" });

        expect(response.status).toBe(409);
        expect(response.body).toEqual({
            success: false,
            message: "This email is already associated with an account. Please use another one."
        });
    });

    it("should create an account if username and email are available and password is valid", async () => {
        User.findOne.mockResolvedValueOnce(null).mockResolvedValue(null); // Username available

        // Mock the new User instance and its save method
        const mockUser = {
            username: "testuser",
            email: "test@example.com",
            user_id: "generated_user_id", // Simulate a user ID generated by the database
            save: jest.fn().mockResolvedValue(true),
        };
        User.mockImplementation(() => mockUser); // Mock the User instance

        generateTokenAndSetCookie.mockImplementation(() => {}); // Mock token setting to avoid cookie issues

        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", email: "test@example.com", password: "password123" });

        expect(response.status).toBe(201); // Successful creation
        expect(response.body).toEqual({
            username: "testuser",
            email: "test@example.com",
            user_id: "generated_user_id",
        });
        expect(mockUser.save).toHaveBeenCalled(); // Verify save method was called
        expect(generateTokenAndSetCookie).toHaveBeenCalled(); // Verify token generation
    });

    it("should return 500 if there is a server error", async () => {
        User.findOne.mockRejectedValueOnce(new Error("Server error")); // Simulate a server error in the database

        const response = await request(app)
            .post("/signup")
            .send({ username: "testuser", email: "test@example.com", password: "password123" });

        expect(response.status).toBe(500);
        expect(response.body).toEqual({ error: "Server error" });
    });
});
